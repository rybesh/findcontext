<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version="1.1"
     height="{{ height }}"
     onload="init(this);">
  {% load math %}
  <defs>
    <script type="text/ecmascript"> <![CDATA[
        function init(svg) {
          Array.forEach(svg.getElementsByClassName('button'),
            function (button) {
              button.addEventListener('mouseover', showInfo, false);
              button.addEventListener('mouseout', hideInfo, false);
              button.addEventListener('mousedown', depressButton, false);
              button.addEventListener('click', cancel, false);
            }
          );
        }
        function cancel(event) {
          event.stopPropagation();
          event.preventDefault();
        }
        function depressButton() {
          var button = this;
          button.setAttribute('transform', 'translate(2, 2)');
          button.getElementsByClassName(
            'gradient-up').item(0).setAttribute('class', 'gradient-down');
          button.removeEventListener('mousedown', depressButton, false);
          button.addEventListener('mouseup', raiseButton, false);
        }
        function raiseButton() {
          var button = this;
          button.setAttribute('transform', 'translate(0, 0)');
          button.getElementsByClassName(
            'gradient-down').item(0).setAttribute('class', 'gradient-up');
          button.addEventListener('mousedown', depressButton, false);
          button.removeEventListener('mouseup', raiseButton, false);
        }
        function showInfo() {
          var button = this;
          var info = document.getElementById('info');
          var new_desc = button.getElementsByClassName('description').item(0).cloneNode(true);
          var old_desc = info.getElementsByClassName('description').item(0);
          info.replaceChild(new_desc, old_desc);
          info.previous_desc = old_desc;
          new_desc.setAttribute('visibility', 'visible');
        }
        function hideInfo() {
          var button = this;
          var info = document.getElementById('info');
          if (info.previous_desc) {
            var desc = info.getElementsByClassName('description').item(0);
            info.replaceChild(info.previous_desc, desc);
            info.previous_desc = null;
          }
        }
    ]]> </script>
    <style type="text/css"> <![CDATA[
      .solid {
        fill: #FFFFFF;
      }
      a:hover .solid {
        stroke: #000000;
      }
      a.results .solid {
        fill: #ADF67F;
      }
      a.results:hover .solid {
        stroke: green;
      }
      a.noresults .solid {
        fill: #DC7171;
      }
      a.noresults:hover .solid {
        stroke: red;
      }
      .gradient-up {
        fill: url(#up-gradient);
      }
      .gradient-down {
        fill: url(#down-gradient);
      }
      stop {
        stop-color: #000000;
      }
      .shadow {
        fill: #000000;
        filter: url(#blur);
      }
      text { 
        font-size: 12px;
        font-family: Myriad Pro, Helvetica, Verdana, Arial, sans-serif; 
      } 
      text.name {
        font-size: 13px;
        font-weight: bold;
      }
      text.description {
      }
      tspan.query {
        fill: green;
        font-style: italic;
      }
    ]]> </style>
    <linearGradient id="up-gradient"
                    x1="0.5" y1="0"
                    x2="0.5" y2="1">
      <stop offset="0" style="stop-opacity:0"/>
      <stop offset="1" style="stop-opacity:0.5"/>      
    </linearGradient>
    <linearGradient id="down-gradient"
                    x1="0.5" y1="0"
                    x2="0.5" y2="1">
      <stop offset="0" style="stop-opacity:0.5"/>
      <stop offset="1" style="stop-opacity:0"/>      
    </linearGradient>
    <filter id="blur">
      <feGaussianBlur stdDeviation="2"/>
    </filter>
    <symbol id="shadow">
      <rect class="shadow"
            width="{{ button.width }}" height="{{ button.height }}" ry="10"
            x="6" y="6"/>
    </symbol>
    <symbol id="button">
      <rect class="solid"
            width="{{ button.width }}" height="{{ button.height }}" ry="10"
            x="4" y="4"/>
    </symbol>
  </defs>
  <g id="info" transform="translate(5, 2)">
    <text y="13">
      <tspan>Query:</tspan><tspan class="query" dx="2">{{ query }}</tspan>
    </text>
    <text y="14" class="description">
      <tspan dy="14">Choose a resource below.</tspan>
    </text>
  </g> 
  <g transform="translate(0, {{ info.height }})">
    {% for r in resources %}
    <a class="querylink" xlink:href="{{ r.query_uri }}">
      <g transform="translate(0, {{ forloop.counter0|mult:button.spacing }})">
        <use xlink:href="#shadow"/>
        <g class="button">
          <use xlink:href="#button"/>
          <rect class="gradient-up"
                width="{{ button.width }}" height="{{ button.height }}" ry="10"
                x="4" y="4"/>
          <g transform="translate(10,21)">
            <text class="name">{{ r.name }}</text>
          </g>
          <text class="description" y="14" visibility="hidden">
            {% for line in r.description %}<tspan x="0" dy="14">{{ line }}</tspan>
          {% endfor %}</text>
        </g> 
      </g>  
    </a>
    {% endfor %}
  </g>
</svg>
